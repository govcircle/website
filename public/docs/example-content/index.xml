<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Example Content on GovCircle</title><link>https://govcircle.space/docs/example-content/</link><description>Recent content in Example Content on GovCircle</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 08 Sep 2023 05:12:51 +0100</lastBuildDate><atom:link href="https://govcircle.space/docs/example-content/index.xml" rel="self" type="application/rss+xml"/><item><title>Code</title><link>https://govcircle.space/docs/example-content/code/</link><pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate><guid>https://govcircle.space/docs/example-content/code/</guid><description>&lt;div class="alert alert-warning" role="alert"&gt;
 The front matter &lt;code&gt;description&lt;/code&gt; value for this page has been intentionally left empty in order to demonstrate FlexSearch&amp;rsquo;s suggested results fallback behaviour.
&lt;/div&gt;
&lt;h2 id="code-block-examples"&gt;Code Block Examples &lt;a href="#code-block-examples" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Code block language examples&lt;/p&gt;
&lt;h3 id="go"&gt;Go &lt;a href="#go" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock "&gt;
 &lt;pre id="9a3c1c7" class="language-go "&gt;
 &lt;code&gt;package main

import &amp;#34;fmt&amp;#34;

func main() {
 fmt.Println(&amp;#34;hello world&amp;#34;)
}&lt;/code&gt;
 &lt;/pre&gt;
 &lt;/div&gt;
&lt;h3 id="html"&gt;HTML &lt;a href="#html" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock "&gt;
 &lt;pre id="97da112" class="language-html "&gt;
 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;My First Heading&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;My first paragraph.&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
 &lt;/pre&gt;
 &lt;/div&gt;
&lt;h3 id="markdown"&gt;Markdown &lt;a href="#markdown" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;


 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock "&gt;
 &lt;pre id="cab457f" class="language-md "&gt;
 &lt;code&gt;# H1 heading

**Some bold text**

*Italic text example*&lt;/code&gt;
 &lt;/pre&gt;
 &lt;/div&gt;</description></item><item><title>Mermaid</title><link>https://govcircle.space/docs/example-content/mermaid/</link><pubDate>Fri, 08 Sep 2023 05:12:51 +0100</pubDate><guid>https://govcircle.space/docs/example-content/mermaid/</guid><description>&lt;h2 id="flowchart"&gt;Flowchart &lt;a href="#flowchart" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;flowchart LR

A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/pre&gt;
&lt;h2 id="sequence-diagram"&gt;Sequence diagram &lt;a href="#sequence-diagram" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
 John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/pre&gt;
&lt;h2 id="gantt-chart"&gt;Gantt Chart &lt;a href="#gantt-chart" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;gantt
 section Section
 Completed :done, des1, 2014-01-06,2014-01-08
 Active :active, des2, 2014-01-07, 3d
 Parallel 1 : des3, after des1, 1d
 Parallel 2 : des4, after des1, 1d
 Parallel 3 : des5, after des3, 1d
 Parallel 4 : des6, after des4, 1d
&lt;/pre&gt;
&lt;h2 id="class-diagram"&gt;Class diagram &lt;a href="#class-diagram" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
 &amp;gt;&amp;gt;service&amp;gt;&amp;gt;
 int id
 size()
}
&lt;/pre&gt;
&lt;h2 id="state-diagram"&gt;State diagram &lt;a href="#state-diagram" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;stateDiagram-v2
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/pre&gt;
&lt;h2 id="pie-chart"&gt;Pie Chart &lt;a href="#pie-chart" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;pie
&amp;#34;Dogs&amp;#34; : 386
&amp;#34;Cats&amp;#34; : 85.9
&amp;#34;Rats&amp;#34; : 15
&lt;/pre&gt;
&lt;h2 id="git-graph"&gt;Git Graph &lt;a href="#git-graph" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt; gitGraph
 commit
 commit
 branch develop
 checkout develop
 commit
 commit
 checkout main
 merge develop
 commit
 commit
&lt;/pre&gt;
&lt;h2 id="bar-chart-using-gantt-chart"&gt;Bar chart (using gantt chart) &lt;a href="#bar-chart-using-gantt-chart" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;gantt
 title Git Issues - days since last update
 dateFormat X
 axisFormat %s

 section Issue19062
 71 : 0, 71
 section Issue19401
 36 : 0, 36
 section Issue193
 34 : 0, 34
 section Issue7441
 9 : 0, 9
 section Issue1300
 5 : 0, 5
&lt;/pre&gt;
&lt;h2 id="user-journey-diagram"&gt;User Journey diagram &lt;a href="#user-journey-diagram" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt; journey
 title My working day
 section Go to work
 Make tea: 5: Me
 Go upstairs: 3: Me
 Do work: 1: Me, Cat
 section Go home
 Go downstairs: 5: Me
 Sit down: 3: Me
&lt;/pre&gt;
&lt;h2 id="c4-diagram"&gt;C4 diagram &lt;a href="#c4-diagram" class="anchor" aria-hidden="true"&gt;&lt;i class="material-icons align-middle"&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class="mermaid"&gt;C4Context
title System Context diagram for Internet Banking System

Person(customerA, &amp;#34;Banking Customer A&amp;#34;, &amp;#34;A customer of the bank, with personal bank accounts.&amp;#34;)
Person(customerB, &amp;#34;Banking Customer B&amp;#34;)
Person_Ext(customerC, &amp;#34;Banking Customer C&amp;#34;)
System(SystemAA, &amp;#34;Internet Banking System&amp;#34;, &amp;#34;Allows customers to view information about their bank accounts, and make payments.&amp;#34;)

Person(customerD, &amp;#34;Banking Customer D&amp;#34;, &amp;#34;A customer of the bank, &amp;lt;br/&amp;gt; with personal bank accounts.&amp;#34;)

Enterprise_Boundary(b1, &amp;#34;BankBoundary&amp;#34;) {

 SystemDb_Ext(SystemE, &amp;#34;Mainframe Banking System&amp;#34;, &amp;#34;Stores all of the core banking information about customers, accounts, transactions, etc.&amp;#34;)

 System_Boundary(b2, &amp;#34;BankBoundary2&amp;#34;) {
 System(SystemA, &amp;#34;Banking System A&amp;#34;)
 System(SystemB, &amp;#34;Banking System B&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)
 }

 System_Ext(SystemC, &amp;#34;E-mail system&amp;#34;, &amp;#34;The internal Microsoft Exchange e-mail system.&amp;#34;)
 SystemDb(SystemD, &amp;#34;Banking System D Database&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)

 Boundary(b3, &amp;#34;BankBoundary3&amp;#34;, &amp;#34;boundary&amp;#34;) {
 SystemQueue(SystemF, &amp;#34;Banking System F Queue&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)
 SystemQueue_Ext(SystemG, &amp;#34;Banking System G Queue&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)
 }
}

BiRel(customerA, SystemAA, &amp;#34;Uses&amp;#34;)
BiRel(SystemAA, SystemE, &amp;#34;Uses&amp;#34;)
Rel(SystemAA, SystemC, &amp;#34;Sends e-mails&amp;#34;, &amp;#34;SMTP&amp;#34;)
Rel(SystemC, customerA, &amp;#34;Sends e-mails to&amp;#34;)
&lt;/pre&gt;</description></item></channel></rss>